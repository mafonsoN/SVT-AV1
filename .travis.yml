language: c
cache:
  ccache: true
  pip: true
os:
  - linux
  - osx
dist: bionic
osx_image: xcode11
compiler:
  - clang
  - gcc
addons:
  apt:
    packages:
      - cmake
      - yasm
      - valgrind
      - libgstreamer-plugins-base1.0-dev
      - libgstreamer1.0-dev
  homebrew:
    packages:
      - yasm
      - ccache
notifications:
  webhooks:
    - https://coveralls.io/webhook
env:
  - build_type=release
stages:
  - name: style
  - name: test
  - name: unittest
  - name: coveralls
    if: type != pull_request
  - name: valgrind
    if: type != pull_request
before_install:
  - "sudo chown -R travis: $HOME/.ccache"
  - export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:/usr/local/lib PKG_CONFIG_PATH=${PKG_CONFIG_PATH}:/usr/local/lib/pkgconfig PATH="/usr/local/opt/ccache/libexec:$PATH"
  - cd $TRAVIS_BUILD_DIR
  - wget -nc https://raw.githubusercontent.com/OpenVisualCloud/SVT-AV1-Resources/master/video.tar.gz || wget -nc http://randomderp.com/video.tar.gz
  - tar xf video.tar.gz
  - mkdir -p $TRAVIS_BUILD_DIR/Build/linux/${build_type:-Release}
install:
  - pip install --user cpp-coveralls
  - export PATH=/Users/travis/Library/Python/2.7/bin:${PATH}
  - |
    if [ "$TRAVIS_OS_NAME" != "osx" ]; then
      export CFLAGS="-Werror"
      if [ "$CC" = "clang" ]; then export CFLAGS+=" -Wno-error=array-bounds"; fi
    fi
  #- if [ $TRAVIS_OS_NAME = osx ]; then brew install --HEAD valgrind; fi
base_script: &base_script |
  cd $TRAVIS_BUILD_DIR/Build/linux/${build_type:-Release}
  cmake $TRAVIS_BUILD_DIR -G"${generator:-Unix Makefiles}" -DCMAKE_BUILD_TYPE=${build_type:-Release} ${CMAKE_EFLAGS[@]}
  cmake -j $(if [ $TRAVIS_OS_NAME = osx ]; then sysctl -n hw.ncpu; else nproc; fi) --build . &&
  sudo cmake --build . --target install && cd $TRAVIS_BUILD_DIR
coveralls_script: &coveralls_script |
  SvtAv1EncApp -enc-mode 8 -w 720 -h 486 -fps 60 -i akiyo_cif.y4m -n 150 -b test1.ivf
  git clone https://github.com/FFmpeg/FFmpeg ffmpeg --depth=1 --branch release/4.2 && cd ffmpeg &&
  git apply $TRAVIS_BUILD_DIR/ffmpeg_plugin/0001-Add-ability-for-ffmpeg-to-run-svt-av1.patch &&
  ffmpegconfig=(--disable-everything --enable-{libsvtav1,encoder={libaom_av1,libsvt_av1,rawvideo},decoder={h264,rawvideo,yuv4,libaom_av1},muxer={fifo,matroska,ivf,mp4,rawvideo,webm,yuv4mpegpipe},demuxer={h264,ivf,matroska,mpegts,rawvideo,yuv4mpegpipe},parser={av1,h264,mpeg4video},bsf={av1_metadata,h264_metadata},protocol={data,file,pipe,unix},filter={fifo,fps,libvmaf,psnr,ssim,vmafmotion}})
  sudo chown -R travis: $HOME/.ccache
  CFLAGS=""
  if ! ./configure ${ffmpegconfig[@]}; then cat ffbuild/config.log; fi &&
  make -s -j$(if [ $TRAVIS_OS_NAME = osx ]; then sysctl -n hw.ncpu; else nproc; fi) >/dev/null &&
  sudo make install && cd $TRAVIS_BUILD_DIR &&
  ffmpeg -i akiyo_cif.y4m -vframes 150 -c:v libsvt_av1 test.mp4 &&
  ffmpeg -i bus_cif.y4m -nostdin -f rawvideo -pix_fmt yuv420p - | SvtAv1EncApp -i stdin -w 352 -h 288 -fps 30 -n 150 -b test2.ivf
after_coveralls_script: &after_coveralls_script |
  if [ $CC = "clang" ] && [ $TRAVIS_OS_NAME = linux ]; then
    GCOV_FILE=llvm-cov GCOV_OPTIONS='gcov -pl'
  else
    GCOV_FILE=gcov GCOV_OPTIONS='\-lp'
  fi
  coveralls --root $TRAVIS_BUILD_DIR -i Source -E ".*gtest.*" -E ".*CMakeFiles.*" -E ".*third_party.*" -E ".*test/FilmGrainTest.cc" -E ".*ffmpeg.*" --gcov $GCOV_FILE --gcov-options "$GCOV_OPTIONS"
script:
  - *base_script
  - SvtAv1EncApp -enc-mode 8 -w 720 -h 486 -fps 60 -i akiyo_cif.y4m -n 150 -b test1.ivf
before_cache:
  - "sudo chown -R travis: $HOME/.ccache"
matrix:
  fast_finish: true
  allow_failures:
    - name: Binary Identical?
    - name: Valgrind
    - env: COVERALLS_PARALLEL=true build_type=debug CMAKE_EFLAGS="-DCOVERAGE=ON"
    - name: Unit Tests Linux+gcc
    - name: Unit Tests osx+clang
    # Exclude these because if the encoder can run with a release build, the commit is probably fine. Also required for fast_finish.
  exclude:
    - os: osx
      compiler: gcc # gcc = clang in macOS, unecessary duplicate
  include:
    # Coding style check
    - name: Style check
      stage: style
      addons: skip
      before_install: skip
      install: skip
      script:
        - git remote rm upstream 2> /dev/null || true
        - git remote add upstream https://github.com/OpenVisualCloud/SVT-AV1.git
        - git fetch -q upstream master
        - git grep -InP --heading "\t" -- . ':!third_party/**/*' && false || true
        - git grep -InP --heading "\r" -- . ':!third_party/**/*' && false || true
        - git grep -InP --heading " $" -- . ':!third_party/**/*' && false || true
        - |
          for file in $(git ls-tree --name-only -r HEAD |
            grep -vE "third_party/|test/e2e_test/test_vector_list.txt|test/vectors/smoking_test.cfg|test/vectors/video_src.cfg|.png"); do
            if [ -n "$(tail -c1 "$file")" ]; then
              echo "No newline at end of $file"
              false
            fi
          done
          for i in $(git rev-list HEAD ^upstream/master); do
            echo "Checking commit message of $i"
            msg="$(git log --format=%B -n 1 $i)"
            if [ -n "$(sed -n 2p <<<"$msg")" ]; then
              echo "Malformed commit message in $i, second line must be empty"
              false
            fi
            if head -1 <<<"$msg" | grep -q '\.$'; then
              echo "Malformed commit message in $i, trailing period in subject line"
              false
            fi
          done
    # FFmpeg interation build
    - name: FFmpeg patch
      stage: test
      compiler: gcc
      env: build_type=release
      script:
        # Build and install SVT-AV1
        - *base_script
        # Apply SVT-AV1 plugin and enable libsvtav1 to FFmpeg
        - git clone https://github.com/FFmpeg/FFmpeg --branch release/4.2 --depth=1 ffmpeg && cd ffmpeg
        - git apply $TRAVIS_BUILD_DIR/ffmpeg_plugin/0001-Add-ability-for-ffmpeg-to-run-svt-av1.patch
        - export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:/usr/local/lib PKG_CONFIG_PATH=${PKG_CONFIG_PATH}:/usr/local/lib/pkgconfig
        - "sudo chown -R travis: $HOME/.ccache"
        - export CFLAGS=""
        - ./configure --enable-libsvtav1 || less ffbuild/config.log
        - make --quiet -j$(nproc) && sudo make install
    # GStreamer interation build
    - name: GStreamer patch
      stage: test
      compiler: gcc
      env: build_type=release
      script:
      # Build and install SVT-AV1
      - *base_script
      # Build GST-SVT-AV1 plugin
      - cd $TRAVIS_BUILD_DIR/gstreamer-plugin
      - "sudo chown -R travis: $HOME/.ccache"
      - CFLAGS=""
      - cmake .
      - make --quiet -j$(nproc)
      - sudo make install
    # Tests if .ivf files are identical on binary level
    - name: Binary Identical?
      stage: test
      os: linux
      compiler: gcc
      script:
        - mv -t $HOME akiyo_cif.y4m
        - *base_script
        - cd $HOME
        - SvtAv1EncApp -enc-mode 8 -i akiyo_cif.y4m -n 120 -b test-pr-m8.ivf
        - SvtAv1EncApp -enc-mode 0 -i akiyo_cif.y4m -n 3 -b test-pr-m0.ivf
        - rm -rf $TRAVIS_BUILD_DIR
        - git clone --depth 1 https://github.com/OpenVisualCloud/SVT-AV1.git $TRAVIS_BUILD_DIR
        - cd $TRAVIS_BUILD_DIR
        - mkdir -p $TRAVIS_BUILD_DIR/Build/linux/${build_type:-Release}
        - *base_script
        - cd $HOME
        - SvtAv1EncApp -enc-mode 8 -i akiyo_cif.y4m -n 120 -b test-master-m8.ivf
        - SvtAv1EncApp -enc-mode 0 -i akiyo_cif.y4m -n 3 -b test-master-m0.ivf
        - diff test-pr-m8.ivf test-master-m8.ivf
        - diff test-pr-m0.ivf test-master-m0.ivf
    - name: Coveralls Linux+gcc
      stage: Coveralls
      os: linux
      compiler: gcc
      env: COVERALLS_PARALLEL=true build_type=debug CMAKE_EFLAGS="-DCOVERAGE=ON"
      script:
        - *base_script
        - *coveralls_script
      after_script: *after_coveralls_script
    - name: Coveralls osx+clang
      stage: Coveralls
      os: osx
      compiler: clang
      env: COVERALLS_PARALLEL=true build_type=debug CMAKE_EFLAGS="-DCOVERAGE=ON"
      script:
        - *base_script
        - *coveralls_script
      after_script: *after_coveralls_script
    - name: Valgrind
      stage: valgrind
      compiler: gcc
      os: linux
      env: build_type=debug
      script:
        - *base_script
        - valgrind -- SvtAv1EncApp -enc-mode 2 -w 720 -h 486 -fps 60 -i akiyo_cif.y4m -n 20 -b test1.ivf
    - name: Unit Tests Linux+gcc
      stage: unittest
      os: linux
      compiler: gcc
      env: build_type=release CMAKE_EFLAGS="-DBUILD_TESTING=ON" SVT_AV1_TEST_VECTOR_PATH=$TRAVIS_BUILD_DIR/test/vectors/
      script:
        - *base_script
        - cd $TRAVIS_BUILD_DIR/Build/linux/${build_type:-Release}
        - make TestVectors
        - cd $TRAVIS_BUILD_DIR
        - SvtAv1UnitTests
        - SvtAv1ApiTests
        - SvtAv1E2ETests
    - name: Unit Tests osx+clang
      stage: unittest
      os: osx
      compiler: clang
      env: build_type=release CMAKE_EFLAGS="-DBUILD_TESTING=ON" SVT_AV1_TEST_VECTOR_PATH=$TRAVIS_BUILD_DIR/test/vectors/
      script:
        - *base_script
        - cd $TRAVIS_BUILD_DIR/Build/linux/${build_type:-Release}
        - make TestVectors
        - cd $TRAVIS_BUILD_DIR
        - SvtAv1UnitTests
        - SvtAv1ApiTests
        - SvtAv1E2ETests
